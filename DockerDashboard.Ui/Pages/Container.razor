@page "/container/{environmentId:long}/{containerId}"
@using DockerDashboard.Ui.Components
@using DockerDashboard.Shared.Data
@using DockerDashboard.Shared.Hubs
@using DockerDashboard.Shared.Services
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@inject IDockerHostManager DockerHostManager 

 @implements IAsyncDisposable

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="@($"Container {_containerDetails?.ContainerName.Trim('/')}")"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<ContainerDetailsWrapper @ref="_containerDetailsComponent" EnvironmentId="EnvironmentId" Container="@_containerDetails" CompactMode="false"></ContainerDetailsWrapper>

@code {
    [Parameter]
    public long EnvironmentId { get; set; }

    [Parameter]
    public string? ContainerId { get; set; }

    private ContainerModel? _containerDetails;
    private ContainerDetailsWrapper? _containerDetailsComponent;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/containerDetailsHub"))
           .Build();

        _hubConnection.On<UpdateContainerEvent>(HubRouting.ContainerUpdateMethod(EnvironmentId), OnContainerEvent);
        _hubConnection.On<CreateContainerEvent>(HubRouting.ContainerCreateMethod(EnvironmentId), OnContainerEvent);
        _hubConnection.On<ContainerLogEvent>(HubRouting.ContainerLogMethod(EnvironmentId), OnContainerEvent);

        await _hubConnection.StartAsync();
    }

    protected async Task OnContainerEvent(ContainerEvent @event)
    {
        if (_containerDetails?.ContainerId == @event.ContainerId)
        {
            if (_containerDetailsComponent != null)
            {
                await _containerDetailsComponent.UpdateAsync(@event);
            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (ContainerId != null)
        {
            _containerDetails = await DockerHostManager.GetContainerManager(EnvironmentId).TryGetContainerAsync(ContainerId, CancellationToken.None);
            StateHasChanged();
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
