@page "/containers/{environmentid:long}"
@using DockerDashboard.Ui.Components
@using DockerDashboard.Shared.Hubs
@using DockerDashboard.Shared.Data
@using Microsoft.AspNetCore.SignalR.Client
@using IPageDetailsNotificationService = IPageDetailsNotificationService
@using Microsoft.AspNetCore.Components.Sections
@inject IPageDetailsNotificationService PageDetailsNotificationService;
@inject NavigationManager Navigation;

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="Containers"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'">
    <RadzenBody>
        <ContainersGrid @ref="_grid" EnvironmentId="EnvironmentId" ContainerOpen="OnContainerOpen"></ContainersGrid>
    </RadzenBody>    
</RadzenLayout>

@if (_containerDetails != null)
{
    <ContainerDetailsWrapper @ref="_containerDetailsComponent" EnvironmentId="@EnvironmentId" Container="@_containerDetails" CompactMode="true" Close="OnContainerDetailsClose"></ContainerDetailsWrapper>
}

@code {
    // EventConsole console;

    [Parameter]
    public long EnvironmentId { get; set; }

    private ContainersGrid? _grid;
    private ContainerDetailsWrapper? _containerDetailsComponent;
    private ContainerModel? _containerDetails;
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/containerDetailsHub"))
            .Build();

        _hubConnection.On<UpdateContainerEvent>(HubRouting.ContainerUpdateMethod(EnvironmentId), OnContainerUpdate);
        _hubConnection.On<CreateContainerEvent>(HubRouting.ContainerUpdateMethod(EnvironmentId), OnContainerUpdate);
        _hubConnection.On<DestroyContainerEvent>(HubRouting.ContainerUpdateMethod(EnvironmentId), OnContainerUpdate);
        _hubConnection.On<ContainerLogEvent>(HubRouting.ContainerLogMethod(EnvironmentId), OnContainerUpdate);


        await _hubConnection.StartAsync();
    }

    private async Task OnContainerOpen(ContainerModel arg)
    {
        _containerDetails = arg;
        await PageDetailsNotificationService.OpenPageDetailsAsync();
        StateHasChanged();
    }

    private async Task OnContainerUpdate(ContainerEvent arg)
    {
        if (_grid != null)
        {
            await _grid.UpdateContainerAsync(arg);
        }

        if (_containerDetails?.ContainerId == arg.ContainerId)
        {
            if (_containerDetailsComponent != null)
            {
                await _containerDetailsComponent.UpdateAsync(arg);
            }
        }
    }

    private async Task OnContainerDetailsClose()
    {
        await PageDetailsNotificationService.ClosePageDetailsAsync();
        _containerDetails = null;

        
        StateHasChanged();
    }

}
