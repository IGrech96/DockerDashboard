@page "/images/{environmentid:long}"
@using DockerDashboard.Ui.Components
@using DockerDashboard.Shared.Hubs
@using DockerDashboard.Shared.Data
@using Microsoft.AspNetCore.SignalR.Client
@using IPageDetailsNotificationService = IPageDetailsNotificationService
@using Microsoft.AspNetCore.Components.Sections
@inject IPageDetailsNotificationService PageDetailsNotificationService;
@inject NavigationManager Navigation;

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="Images"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<ImagesGrid @ref="_grid" EnvironmentId="EnvironmentId" ImageOpen="OnImageOpen"></ImagesGrid>

@if (_imageDetails != null)
{
    <ImageDetailsWrapper @ref="_detailsComponent" EnvironmentId="@EnvironmentId" Image="@_imageDetails" CompactMode="true" Close="OnImageDetailsClose"></ImageDetailsWrapper>
}

@code {
    // EventConsole console;

    [Parameter]
    public long EnvironmentId { get; set; }

    private ImagesGrid? _grid;
    private ImageDetailsWrapper? _detailsComponent;
    private ImageModel? _imageDetails;
    private HubConnection? _hubConnection;
    //private long? _previousEnvironment;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
            //.AddJsonProtocol(op => op.PayloadSerializerOptions.)
            .WithUrl(Navigation.ToAbsoluteUri("/containerDetailsHub"))
            .Build();
        await _hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        // if (_hubConnection != null)
        // {
        //     if (_previousEnvironment.HasValue && EnvironmentId != _previousEnvironment)
        //     {
        //         _hubConnection.Remove(HubRouting.ContainerUpdateMethod(_previousEnvironment.Value));
        //         _hubConnection.Remove(HubRouting.ContainerCreateMethod(_previousEnvironment.Value));
        //         _hubConnection.Remove(HubRouting.ContainerDestroyMethod(_previousEnvironment.Value));
        //         _previousEnvironment = EnvironmentId;
        //     }

        //     _hubConnection.On<UpdateContainerEvent>(HubRouting.ContainerUpdateMethod(EnvironmentId), OnContainerUpdate);
        //     _hubConnection.On<CreateContainerEvent>(HubRouting.ContainerCreateMethod(EnvironmentId), OnContainerUpdate);
        //     _hubConnection.On<DestroyContainerEvent>(HubRouting.ContainerDestroyMethod(EnvironmentId), OnContainerUpdate);
        //     _hubConnection.On<ContainerLogEvent>(HubRouting.ContainerLogMethod(EnvironmentId), OnContainerUpdate);

        // }
    }

    private async Task OnImageOpen(ImageModel arg)
    {
        _imageDetails = arg;
        await PageDetailsNotificationService.OpenPageDetailsAsync();
        StateHasChanged();
    }

    // private async Task OnContainerUpdate(ContainerEvent arg)
    // {
    //     if (_grid != null)
    //     {
    //         await _grid.UpdateContainerAsync(arg);
    //     }

    //     // if (_imageDetails?.ContainerId == arg.ContainerId)
    //     // {
    //     //     if (_detailsComponent != null)
    //     //     {
    //     //         await _detailsComponent.UpdateAsync(arg);
    //     //     }
    //     // }
    // }

    private async Task OnImageDetailsClose()
    {
        await PageDetailsNotificationService.ClosePageDetailsAsync();
        _imageDetails = null;

        
        StateHasChanged();
    }

}
