@using DockerDashboard.Shared.Data
@using DockerDashboard.Shared.Hubs
@using DockerDashboard.Shared.Services
@using DockerDashboard.Ui.Clients
@using DockerDashboard.Ui.Services

@inject IDockerHostManager DockerHostManager
@inject NavigationManager Navigation
@inject ContextMenuService ContextMenuService

<RadzenDataGrid @ref=grid Data="@_orderedContainers" Count="@count" AllowVirtualization="true" Style="height:400px"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <Columns>
        <RadzenDataGridColumn Title="Name">
            <Template Context="data">
                <Button class="button-link" onclick="@(() => OpenContainer(data))">@data.ContainerName.TrimStart('/')</Button>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText TextStyle="TextStyle.Caption">@data.ShortId</RadzenText>
                    @* <RadzenIcon Icon="content_copy" style="font-size=1em; width=5px; font-weight=100"></RadzenIcon> *@
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Image">
            <Template Context="data">
                <a href="">@data.ImageName</a>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Status" Title="Status">
            <Template Context="data">
                @if (data.Status is ContainerStatus.NA )
                {
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />                        
                }
                else
                {
                    @data.Status.ToString()
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Port(s)">
            <Template Context="data">
                <RadzenStack Wrap="FlexWrap.Wrap" Gap="0">
                    @foreach (var (localPort, containerPort) in data.Ports)
                    {
                        <a href="">@localPort:@containerPort</a>
                    }
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Created" Title="Created">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Actions" Filterable="false" Sortable="false" Frozen="true" >
            <Template Context="data">
                <RadzenButton Disabled="@(!ToolbarEnabled(data))" Click="@(() => StartStop(data))"  Icon="@ChooseMenuText(data, "play_arrow", "stop")" ButtonStyle="ButtonStyle.Light"></RadzenButton>
                <RadzenButton Disabled="@(!ToolbarEnabled(data))" Click="@(args => OpenMenu(args, data))" Icon="more_vert" ButtonStyle="ButtonStyle.Light"></RadzenButton>
                <RadzenButton Disabled="@(!ToolbarEnabled(data))" Click="@(() => Delete(data))" Icon="delete" ButtonStyle="ButtonStyle.Light"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<ContainerModel> grid;
    private int count;
    private List<ContainerModel> _orderedContainers;

    [Parameter]
    public long? EnvironmentId { get; set; }

    [Parameter]
    public Func<ContainerModel, Task>? ContainerOpen { get; set; }

    private async Task OpenContainer(ContainerModel model)
    {
        if (ContainerOpen != null)
        {
            await ContainerOpen(model);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            await RefreshDataAsync();
        }
    }

    public async Task UpdateContainerAsync(ContainerEvent @event)
    {
        // //TODO: concurrency
        if (@event is UpdateContainerEvent update)
        {
            var row = _orderedContainers?.FirstOrDefault(m => m.ContainerId == update.ContainerId);
            if (row != null)
            {
                row.Populate(update.Container);
                await InvokeAsync(async () =>
                {
                    await grid.Reload();
                });
            }
        }
        else if (@event is CreateContainerEvent create)
        {
            _orderedContainers.Add(create.Container);
            await InvokeAsync(async () =>
            {
                await grid.Reload();
            });
        }
        else if (@event is DestroyContainerEvent destroy)
        {
            var index = _orderedContainers.FindIndex(m => m.ContainerId == destroy.ContainerId);
            if (index >= 0)
            {
                _orderedContainers.RemoveAt(index);
                await InvokeAsync(async () =>
                {
                    await grid.Reload();
                });
            }
        }
    }

    public async Task RefreshDataAsync()
    {
        if (EnvironmentId.HasValue)
        {
            _orderedContainers = await DockerHostManager.GetContainers(EnvironmentId.Value, CancellationToken.None).ToListAsync();
            await grid.Reload();

            StateHasChanged();
        }
    }

    private string ChooseMenuText(ContainerModel container, string activate, string diactivate)
    {
        if (container?.Status == ContainerStatus.Running)
        {
            return diactivate;
        }
        return activate;
    }

    private Task OpenMenu(MouseEventArgs args, ContainerModel data)
    {
        var menu = new List<ContextMenuItem>();
        if (data.Status == ContainerStatus.Running)
        {
            menu.Add(new ContextMenuItem() { Text = "Pause", Value = "Pause", Icon = "pause" });
        }


        ContextMenuService.Open(args, menu,
            (e) =>
            {
                //console.Log($"Menu item with Value={e.Value} clicked. Tree item: {args.Text}, EmployeeID: {((Employee)args.Value).EmployeeID}");
            }
        );

        return Task.CompletedTask;
    }

    private async Task StartStop(ContainerModel data)
    {
        if (data.Status == ContainerStatus.Running)
        {
            data.Status = ContainerStatus.NA;
            StateHasChanged();
            await DockerHostManager.StopContainerAsync(EnvironmentId!.Value, data.ContainerId);
        }
        else
        {
            data.Status = ContainerStatus.NA;
            StateHasChanged();
            await DockerHostManager.StartContainerAsync(EnvironmentId!.Value, data.ContainerId);
        }
    }

    private async Task Delete(ContainerModel data)
    {
        data.Status = ContainerStatus.NA;
        StateHasChanged();
        await DockerHostManager.DeleteContainerAsync(EnvironmentId!.Value, data.ContainerId);
    }

    private bool ToolbarEnabled(ContainerModel data)
    {
        return data.Status != ContainerStatus.NA;
    }

}
