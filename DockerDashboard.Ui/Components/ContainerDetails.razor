@using DockerDashboard.Shared.Data
@using DockerDashboard.Shared.Services
@using DockerDashboard.Ui.Services
@using ContainerStatus = DockerDashboard.Shared.Data.ContainerStatus
@inject NavigationManager Navigation
@inject IDockerHostManager DockerHostManager
@inject TooltipService TooltipService
@inject IJSRuntime JSRuntime

@implements IDisposable

<RadzenDataGrid Data="@_containerCommonInfo">
    <Columns>
        <RadzenDataGridColumn Title="Name" Property="Name"></RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Value" Property="Value">
            <Template Context="data">
                @if (data.Value is DateTime dateTime)
                {
                    @dateTime.ToString("yyyy-MM-dd hh:mm:ss")
                }
                else if (data is { Name: "Image", Value: not null })
                {
                    <a href="">@data.Value.ToString()!.TrimStart('/')</a>
                }
                else if (data is { Name: "Status", Value: ContainerStatus.NA })
                {
                    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                }
                else
                {
                    @data.Value?.ToString()
                }
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>
<RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client" Change="OnTabChange">
    <Tabs>
        <RadzenTabsItem Text="Logs">

            @if (_logsLoaded)
            {
                <RadzenDataList AllowVirtualization="true" Style="height:400px;overflow:auto;"
                                WrapItems="false" AllowPaging="false"
                                Data="_logs" TItem="string" PagerHorizontalAlign="HorizontalAlign.Left">
                    <Template Context="log">
                        <div class="box">@log</div>
                    </Template>
                </RadzenDataList>
            }
            else
            {
                <RadzenStack AlignItems="AlignItems.Center">
                    <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                        <Template>Loading...</Template>
                    </RadzenProgressBarCircular>
                </RadzenStack>

            }
        </RadzenTabsItem>
        <RadzenTabsItem Text="Details">
            <RadzenDataGrid Data="@_containerDetailedInfo" Render="@OnRender">
                <Columns>
                    <RadzenDataGridColumn Title="Name" Property="Name"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Value" Property="Value">
                        <Template Context="data">
                            @if (data.Value is DateTime dateTime)
                            {
                                @dateTime.ToString("yyyy-MM-dd hh:mm:ss")
                            }
                            else if (data is { Name: "Image", Value: not null })
                            {
                                <a href="">@data.Value.ToString()!.TrimStart('/')</a>
                            }
                            else if (data.Value is MountPoint mount)
                            {
                                <p>type=@mount.Type,source=@mount.Source,target=@mount.Destination </p>
                                <p>Readonly=@(!mount.RW)</p>
                                <p>Propagation=@mount.Propagation</p>
                            }
                            else if (data is { Name: "Status", Value: ContainerStatus.NA })
                            {
                                <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
                            }
                            else
                            {
                                @data.Value?.ToString()
                            }
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenTabsItem>
        <RadzenTabsItem Text="Inspect"></RadzenTabsItem>
        <RadzenTabsItem Text="Stats"></RadzenTabsItem>
        <RadzenTabsItem Text="Files"></RadzenTabsItem>
    </Tabs>
</RadzenTabs>

@code {

    [Parameter] public ContainerModel? Container { get; set; }

    [Parameter] public long? EnvironmentId { get; set; }

    private CommonInfo[] _containerCommonInfo = [];
    private DetailedInfo[] _containerDetailedInfo = [];
    private bool _logsLoaded = false;

    private List<string> _logs = [];
    // private readonly CancellationTokenSource _timerCancellationToken = new();
    // private DateTimeOffset _previousOffset = new DateTimeOffset(0, TimeSpan.Zero);


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ReloadAsync();
        
    }


    private void OnRender(DataGridRenderEventArgs<DetailedInfo> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Groups.Add(new GroupDescriptor() { Property = "Category" });
            StateHasChanged();
        }
    }

    public async Task ReloadAsync()
    {
        if (Container != null)
        {
            _containerCommonInfo =
            [
                new("ID", Container.ContainerId),
                new("Name", Container.ContainerName),
                new("Image", Container.ImageName),
                new("Status", Container.Status),
                new("Created", Container.Created),
                new("Start time", "")
            ];
        }
        else
        {
            _containerCommonInfo = [];
        }

        await InvokeAsync(StateHasChanged);
    }

    protected async Task OnTabChange(int index)
    {
        if (index == 1)
        {
            if (EnvironmentId.HasValue && Container != null)
            {
                var details = await DockerHostManager.GetContainerDetails(EnvironmentId.Value, Container.ContainerId, CancellationToken.None);
                _containerDetailedInfo =
                [
                    new("Common", "EntryPoint", string.Join(" ", details.EntryPoint)),
                    new("Common", "Command", string.Join(" ", details.Command)),
                    new("Common", "Restart policy", details.RestartPolicy),
                    new("Common", "Restarts count", details.RestartCount),
                    new("Common", "User", details.User),
                    new("Common", "Working Directory", details.WorkingDirectory),
                    ..details.Environment.Select(r => new DetailedInfo("Environment", r.Key, r.Value)),
                    ..details.Labels.Select(r => new DetailedInfo("Labels", r.Key, r.Value)),
                    ..details.Mounts.Select(r => new DetailedInfo("Mounts", r.Name, r)),
                ];
            }
            else
            {
                _containerDetailedInfo = [];
            }

            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        // if (firstRender)
        // {
        //     if (EnvironmentId.HasValue && Container != null)
        //     {
        //         var now = DateTimeOffset.UtcNow;
        //         var logsEnumeration = DockerHostManager.GetContainerLogsAsync(EnvironmentId.Value, Container.ContainerId, _previousOffset, now);
        //         var counter = 0;
        //         await foreach (var log in logsEnumeration)
        //         {
        //             _logsLoaded = true;
        //             _logs.Add(log);
        //             counter++;

        //             if (counter % 100 == 0)
        //             {
        //                 await InvokeAsync(StateHasChanged);
        //             }
        //         }
        //         _previousOffset = now;

        //         await InvokeAsync(StateHasChanged);
        //     }

        //     using var timer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        //     while (!_timerCancellationToken.IsCancellationRequested && await timer.WaitForNextTickAsync())
        //     {
        //         if (EnvironmentId.HasValue && Container != null)
        //         {
        //             var now = DateTimeOffset.UtcNow;
        //             var logsEnumeration = DockerHostManager.GetContainerLogsAsync(EnvironmentId.Value, Container.ContainerId, _previousOffset, now);
        //             var counter = 0;
        //             await foreach (var log in logsEnumeration)
        //             {
        //                 _logsLoaded = true;
        //                 _logs.Add(log);
        //                 counter++;

        //                 if (counter % 100 == 0)
        //                 {
        //                     await InvokeAsync(StateHasChanged);
        //                 }
        //             }
        //             _previousOffset = now;

        //             await InvokeAsync(StateHasChanged);
        //         }
        //     }
        // Make sure any subsequent logic is not called after the component is disposed
        // return;
    }

    public void Dispose()
    {
        // _timerCancellationToken.Cancel();
        // _timerCancellationToken.Dispose();
        GC.SuppressFinalize(this);
    }
}
