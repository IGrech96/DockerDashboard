@using DockerDashboard.Shared.Hubs

@inject Radzen.DialogService DialogService
@implements IProgress<ProgressEvent>

<RadzenStack Gap="1rem" Orientation="Orientation.Vertical" JustifyContent="JustifyContent.SpaceBetween" Style="height: 100%;width:100%">
    <RadzenStack>
        <RadzenProgressBar ProgressBarStyle="ProgressBarStyle.Primary" ShowValue="false" Value="100" Mode="ProgressBarMode.Indeterminate"></RadzenProgressBar>
    </RadzenStack>
    @if (_progressEvents.Count > 0)
    {
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" Gap="0.5rem">
            <RadzenDataGrid AllowVirtualization="true" Style="overflow:auto;"
                            WrapItems="false" AllowPaging="false"
                            TItem="ProgressEvent"
                            Data="_progressEvents" PagerHorizontalAlign="HorizontalAlign.Left">
                <Columns>
                    <RadzenDataGridColumn Title="Time" Property="Timestamp"></RadzenDataGridColumn>
                    <RadzenDataGridColumn Title="Message" Property="Message"></RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </RadzenStack>
    }
</RadzenStack>

@code {

    public delegate Task ObservableAction(IProgress<ProgressEvent> progress, CancellationToken cancellationToken);

    [Parameter]
    public ObservableAction Action { get; set; } = (_,_) => Task.CompletedTask;

    private readonly List<ProgressEvent> _progressEvents = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

#pragma warning disable CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
        Task.Run(() => Action(this, CancellationToken.None)
            .ContinueWith(Delay)
            .ContinueWith(OnActionCompleted));
#pragma warning restore CS4014 // Because this call is not awaited, execution of the current method continues before the call is completed
    }

    private async Task Delay(Task obj)
    {
        await Task.Yield();

        await Task.Delay(3000);
    }

    private void OnActionCompleted(Task obj)
    {
        DialogService.Close(obj.Status);
    }

    void IProgress<ProgressEvent>.Report(ProgressEvent value)
    {
        _progressEvents.Add(value);
        StateHasChanged();
    }

}
