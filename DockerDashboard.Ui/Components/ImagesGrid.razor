@using DockerDashboard.Shared.Data
@using DockerDashboard.Shared.Hubs
@using DockerDashboard.Shared.Services
@using DockerDashboard.Ui.Services
@inject IDockerHostManager DockerHostManager
@inject NavigationManager Navigation
@inject ContextMenuService ContextMenuService
@inject Radzen.DialogService DialogService

<RadzenDataGrid @ref=_grid Data="@_orderedContainers" AllowVirtualization="true" Style="overflow:auto;"
                AllowFiltering="true" FilterPopupRenderMode="PopupRenderMode.OnDemand" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" LogicalFilterOperator="LogicalFilterOperator.Or"
                AllowSorting="true">
    <HeaderTemplate>
        <RadzenButton Icon="download" Text="Pull" Click="PullNewImage"  />
    </HeaderTemplate>
    <Columns>
        <RadzenDataGridColumn Title="Name">
            <Template Context="data">
                <button class="button-link" onclick="@(() => OpenImage(data))">@data.ImageName</button>
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenText TextStyle="TextStyle.Caption">@data.ShortId</RadzenText>
                    @* <RadzenIcon Icon="content_copy" style="font-size=1em; width=5px; font-weight=100"></RadzenIcon> *@
                </RadzenStack>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Tag">
            <Template Context="data">
                @data.ImageTag
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Status" Title="Status">
            <Template Context="data">
                @if (data.Countainers > 0)
                {
                    <a href="">In Use</a>
                }
                else
                {
                    <p>Unused</p>
                }
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Created" Title="Created">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="Size" Title="Size">
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Title="Actions" Filterable="false" Sortable="false" Frozen="true">
            <Template Context="data">
                <RadzenButton Click="@(() => RunContainer(data))" Icon="play_arrow" ButtonStyle="ButtonStyle.Light"></RadzenButton>
                <RadzenButton Click="@(args => OpenMenu(args, data))" Icon="more_vert" ButtonStyle="ButtonStyle.Light"></RadzenButton>
                <RadzenButton Click="@(() => Delete(data))" Icon="delete" ButtonStyle="ButtonStyle.Light"></RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<ImageModel>? _grid;
    private List<ImageModel>? _orderedContainers;

    [Parameter]
    public long? EnvironmentId { get; set; }

    [Parameter]
    public Func<ImageModel, Task>? ImageOpen { get; set; }

    private async Task OpenImage(ImageModel model)
    {
        if (ImageOpen != null)
        {
            await ImageOpen(model);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await RefreshDataAsync();
    }

    public Task UpdateContainerAsync(ContainerEvent @event)
    {
        return Task.CompletedTask;
        // // //TODO: concurrency
        // if (@event is UpdateContainerEvent update)
        // {
        //     var row = _orderedContainers?.FirstOrDefault(m => m.ContainerId == update.ContainerId);
        //     if (row != null)
        //     {
        //         row.Populate(update.Container);
        //         await InvokeAsync(async () =>
        //         {
        //             await ReloadGridAsync();
        //         });
        //     }
        // }
        // else if (@event is CreateContainerEvent create)
        // {
        //     _orderedContainers?.Add(create.Container);
        //     await InvokeAsync(async () =>
        //     {
        //         await ReloadGridAsync();
        //     });
        // }
        // else if (@event is DestroyContainerEvent destroy)
        // {
        //     var index = _orderedContainers?.FindIndex(m => m.ContainerId == destroy.ContainerId);
        //     if (index >= 0)
        //     {
        //         _orderedContainers?.RemoveAt(index.Value);
        //         await InvokeAsync(async () =>
        //         {
        //             await ReloadGridAsync();
        //         });
        //     }
        // }
    }

    public async Task RefreshDataAsync()
    {
        if (EnvironmentId.HasValue)
        {
            _orderedContainers = [];
            await ReloadGridAsync();

            StateHasChanged();

            _orderedContainers = await DockerHostManager.GetImageManager(EnvironmentId.Value).GetImagesAsync(CancellationToken.None).ToListAsync();
            await ReloadGridAsync();

            StateHasChanged();
        }
    }

    private Task OpenMenu(MouseEventArgs args, ImageModel data)
    {
        var menu = new List<ContextMenuItem>();

        menu.Add(new ContextMenuItem() {Text = "Pull", Value = "Pull", Icon = "download"});

        ContextMenuService.Open(args, menu, ImageMenuClick);

        return Task.CompletedTask;

        async void ImageMenuClick(MenuItemEventArgs e)
        {
            if (e.Value is "Pull")
            {        
                if (EnvironmentId.HasValue)
                {
                    var fullImageName = $"{data.ImageName}:{data.ImageTag}";
                    await DialogService.OpenProgressDialogAsync(
                        $"Pulling {fullImageName}...",
                        async (progress, token) => await DockerHostManager
                            .GetImageManager(EnvironmentId.Value)
                            .PullImageAsync($"{data.ImageName}:{data.ImageTag}", progress, token));
                }
            }
        }
    }

    private Task RunContainer(ImageModel data)
    {
        //TODO:
        return Task.CompletedTask;
        // if (data.Status == ContainerStatus.Running)
        // {
        //     data.Status = ContainerStatus.NA;
        //     StateHasChanged();
        //     await DockerHostManager.GetContainerManager(EnvironmentId!.Value).StopContainerAsync(data.ContainerId, CancellationToken.None);
        // }
        // else
        // {
        //     data.Status = ContainerStatus.NA;
        //     StateHasChanged();
        //     await DockerHostManager.GetContainerManager(EnvironmentId!.Value).StartContainerAsync(data.ContainerId, CancellationToken.None);
        // }
    }

    private Task Delete(ImageModel data)
    {
        //TODO:
        return Task.CompletedTask;
        // data.Status = ContainerStatus.NA;
        // StateHasChanged();
        // await DockerHostManager.GetContainerManager(EnvironmentId!.Value).DeleteContainerAsync(data.ContainerId, CancellationToken.None);
    }

    private async Task ReloadGridAsync()
    {
        if (_grid != null)
        {
            await _grid.Reload();
        }
    }

    private async Task PullNewImage(MouseEventArgs obj)
    {
        string image = string.Empty;
        var result = await DialogService.OpenAsync("Pull new image", ds =>
            @<RadzenStack Gap="1.5rem">
        <RadzenTextBox @bind-Value="image" Change="args => StateHasChanged()"></RadzenTextBox>
                <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                    <RadzenStack Orientation="Orientation.Horizontal">
                        <RadzenButton Text="Pull" Click="() => ds.Close(true)" Style="width: 80px;"/>
                        <RadzenButton Text="Cancel" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light"/>
                    </RadzenStack>
                </RadzenStack>
            </RadzenStack>);

        if (result is true && !string.IsNullOrEmpty(image) && EnvironmentId.HasValue)
        {
            await DialogService.OpenProgressDialogAsync(
                $"Pulling {image}...",
                async (progress, token) => await DockerHostManager
                    .GetImageManager(EnvironmentId.Value)
                    .PullImageAsync(image, progress, token));
        }
    }

}
