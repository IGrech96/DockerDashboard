@page "/containers/{environmentid}"
@using DockerDashboard.Data
@using DockerDashboard.Components
@using DockerDashboard.Services
@using Microsoft.AspNetCore.Components.Sections
@inject IDockerHostManager DockerHostManager
@inject IPageDetailsNotificationService PageDetailsNotificationService;

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="Containers"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'">
    <RadzenBody>
        <ContainersGrid @ref="grid" Snapshot="_snapshot" OnContainerOpen="OnContainerOpen"></ContainersGrid>
    </RadzenBody>
    <ContainerDetails Container="@_containerDetails" CompactMode="true" Close="OnContainerDetailsClose"></ContainerDetails>
</RadzenLayout>
@code {
    // EventConsole console;

    [Parameter]
    public string environmentid { get; set; }

    [CascadingParameter]
    public RadzenStack Layout { get; set; }
    
    private bool _initialized = false;
    private ContainersGrid grid;
    private ContainerModel? _containerDetails;
    private bool _sidebarExpanded = false;
    

    private ContainersSnapshot? _snapshot;
    private RadzenSidebar _sidebar;
    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            // await WebRequestMethods.Http.DeleteAsync($"api/containers/{_containerToDelete.Id}");
            // await LoadData();
            // _containerToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _snapshot = await DockerHostManager.GetContainersSnapshot();
        await grid.RefreshDataAsync();

        _initialized = true;
    }

    public async void Refresh()
    {
        // await LoadData();
    }

    private async Task OnContainerOpen(ContainerModel arg)
    {
        _containerDetails = arg;
        _sidebarExpanded = true;
        await PageDetailsNotificationService.OpenPageDetailsAsync();
        StateHasChanged();
    }

    private async Task OnContainerDetailsClose()
    {
        await PageDetailsNotificationService.ClosePageDetailsAsync();
        _sidebarExpanded = false;
        _containerDetails = null;

        
        StateHasChanged();
    }

}
