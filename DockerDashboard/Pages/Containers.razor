@page "/containers"
@using DockerDashboard.Data
@using DockerDashboard.Components
@inject IDockerHostManager DockerHostManager
<h3>Containers</h3>

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'">
    <RadzenBody>
        <ContainersGrid @ref="grid" Snapshot="_snapshot" OnContainerOpen="OnContainerOpen"></ContainersGrid>
    </RadzenBody>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End" AlignItems="AlignItems.Center" Gap="1rem">
            <RadzenButton Text="Refresh" Click="@(args => grid.RefreshDataAsync())" class="my-3" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @ref="_sidebar" @bind-Expanded="@_sidebarExpanded" Responsive="false">
        <RadzenStack AlignItems="AlignItems.End" Class="rz-p-2_sidebarExpanded">
            <RadzenButton Icon="close" Variant="Variant.Text" ButtonStyle="ButtonStyle.Secondary" Click="OnContainerDetailsClose" />
        </RadzenStack>
        <ContainerDetails Container="@_containerDetails"></ContainerDetails>
    </RadzenSidebar>
</RadzenLayout>
@code {
    // EventConsole console;
    
    private bool _initialized = false;
    private ContainersGrid grid;
    private ContainerModel? _containerDetails;
    private bool _sidebarExpanded = false;
    

    private ContainersSnapshot? _snapshot;
    private RadzenSidebar _sidebar;
    public bool DeleteDialogOpen { get; set; }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        if (accepted)
        {
            // await WebRequestMethods.Http.DeleteAsync($"api/containers/{_containerToDelete.Id}");
            // await LoadData();
            // _containerToDelete = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        _snapshot = await DockerHostManager.GetContainersSnapshot();
        await grid.RefreshDataAsync();

        _initialized = true;
    }

    public async void Refresh()
    {
        // await LoadData();
    }

    private async Task OnContainerOpen(ContainerModel arg)
    {
        _containerDetails = arg;
        _sidebarExpanded = true;
        StateHasChanged();
    }

    private Task OnContainerDetailsClose(MouseEventArgs arg)
    {
        _sidebarExpanded = false;
        _containerDetails = null;

        StateHasChanged();
        return Task.CompletedTask;
    }

}
