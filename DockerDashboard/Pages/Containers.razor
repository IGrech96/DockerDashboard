@page "/containers/{environmentid:long}"
@using DockerDashboard.Data
@using DockerDashboard.Components
@using DockerDashboard.Hubs
@using DockerDashboard.Services
@using DockerDashboard.Services.DockerHost
@using Microsoft.AspNetCore.Components.Sections
@inject IDockerHostManager DockerHostManager
@inject IPageDetailsNotificationService PageDetailsNotificationService;

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="Containers"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<RadzenLayout Style="grid-template-columns: 1fr auto; grid-template-areas: 'rz-header rz-sidebar' 'rz-body rz-sidebar'">
    <RadzenBody>
        <ContainersGrid @ref="grid" EnvironmentId="environmentId" ContainerOpen="OnContainerOpen" ContainerUpdate="OnContainerUpdate"></ContainersGrid>
    </RadzenBody>
    <ContainerDetails @ref="containerDetailsComponent" Container="@_containerDetails" CompactMode="true" Close="OnContainerDetailsClose"></ContainerDetails>
</RadzenLayout>
@code {
    // EventConsole console;

    [Parameter]
    public long environmentId { get; set; }

    private ContainersGrid grid;
    private ContainerDetails containerDetailsComponent;
    private ContainerModel? _containerDetails;
    private RadzenSidebar _sidebar;

    protected override async Task OnInitializedAsync()
    {
        //await grid.RefreshDataAsync();
    }

    public async void Refresh()
    {
        // await LoadData();
    }

    private async Task OnContainerOpen(ContainerModel arg)
    {
        _containerDetails = arg;
        await PageDetailsNotificationService.OpenPageDetailsAsync();
        StateHasChanged();
    }

    private async Task OnContainerUpdate(ContainerEvent arg)
    {
        if (_containerDetails?.ContainerId == arg.ContainerId)
        {
            await containerDetailsComponent.UpdateAsync(arg);
        }
    }

    private async Task OnContainerDetailsClose()
    {
        await PageDetailsNotificationService.ClosePageDetailsAsync();
        _containerDetails = null;

        
        StateHasChanged();
    }

}
