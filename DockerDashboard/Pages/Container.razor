@page "/container/{environmentId:long}/{containerId}"
@using DockerDashboard.Components
@using DockerDashboard.Data
@using DockerDashboard.Hubs
@using DockerDashboard.Services.DockerHost
@using Microsoft.AspNetCore.Components.Sections
@using Microsoft.AspNetCore.SignalR.Client

@inject NavigationManager Navigation
@inject IDockerHostManager DockerHostManager 

 @implements IAsyncDisposable

<SectionContent SectionName="page-toolbar">
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenLabel Text="@($"Container {_containerDetails?.ContainerName.Trim('/')}")"></RadzenLabel>
    </RadzenStack>
</SectionContent>

<ContainerDetails @ref="_containerDetailsComponent" EnvironmentId="environmentId" Container="@_containerDetails" CompactMode="false"></ContainerDetails>

@code {
    [Parameter]
    public long environmentId { get; set; }

    [Parameter]
    public string? containerId { get; set; }

    private ContainerModel? _containerDetails;
    private ContainerDetails? _containerDetailsComponent;
    private HubConnection _hubConnection;
    private bool _isWatchEnabled = false;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _hubConnection = new HubConnectionBuilder()
           .WithUrl(Navigation.ToAbsoluteUri("/containerDetailsHub"))
           .Build();

        _hubConnection.On<UpdateContainerEvent>(HubRouting.ContainerUpdateMethod(environmentId), OnContainerEvent);
        _hubConnection.On<CreateContainerEvent>(HubRouting.ContainerUpdateMethod(environmentId), OnContainerEvent);
        _hubConnection.On<ContainerLogEvent>(HubRouting.ContainerLogMethod(environmentId), OnContainerEvent);

        await _hubConnection.StartAsync();
    }

    protected async Task OnContainerEvent(ContainerEvent @event)
    {
        if (_containerDetails?.ContainerId == @event.ContainerId)
        {
            await _containerDetailsComponent.UpdateAsync(@event);
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        _containerDetails = await DockerHostManager.GetContainerAsync(environmentId, containerId);
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        await _hubConnection.DisposeAsync();
    }
}
