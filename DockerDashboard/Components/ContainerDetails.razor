@using DockerDashboard.Data
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject IDockerHostManager DockerHostManager

@if (Container == null)
{
    <RadzenStack AlignItems="AlignItems.Center">
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template>Loading...</Template>
        </RadzenProgressBarCircular>
    </RadzenStack>
}
else
{
    <RadzenDataGrid Data="@_containerCommonInfo">
        <Columns>
            <RadzenDataGridColumn Title="Name" Property="Name"></RadzenDataGridColumn>
            <RadzenDataGridColumn Title="Value" Property="Value"></RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    [Parameter]
    public ContainerModel? Container { get; set; }

    private HubConnection _hubConnection;
    private CommonInfo[] _containerCommonInfo = [];

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Container != null)
        {
            _containerCommonInfo =
            [
                new("ID", Container.ContainerId),
                new ("Name", Container.ContainerName),
                new ("Image", Container.ImageName)
            ];
        }
        else
        {
            _containerCommonInfo = [];
        }
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/containerDetailsHub"))
            .Build();
        await _hubConnection.StartAsync();
    }
    private class CommonInfo(string name, string value)
    {
        public string Name { get; set; } = name;

        public string Value { get; set; } = value;
    }
}
