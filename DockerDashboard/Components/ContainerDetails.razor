@using DockerDashboard.Data
@using DockerDashboard.Hubs
@using DockerDashboard.Services
@using DockerDashboard.Services.DockerHost
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Sections
@inject NavigationManager Navigation
@inject IDockerHostManager DockerHostManager
@inject TooltipService TooltipService

@if (Container == null)
{
    <SectionContent SectionName="page-details-sidebar">
        <RadzenStack AlignItems="AlignItems.Center">
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                <Template>Loading...</Template>
            </RadzenProgressBarCircular>
        </RadzenStack>
    </SectionContent>
}
else
{
    <SectionContent SectionName="page-details-toolbar">
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Start">
                <RadzenButton Text="@EnsureFullMode(ChooseMenuText("Run", "Stop"))" Icon="@ChooseMenuText("play_arrow", "stop")" MouseEnter="@(args => ShowTooltip(args,ChooseMenuText("Run", "Stop")))"></RadzenButton>
                <RadzenButton Text="@EnsureFullMode(ChooseMenuText("Resume", "Pause"))" Icon="@ChooseMenuText("play_arrow", "pause")" MouseEnter="@(args => ShowTooltip(args,ChooseMenuText("Resume", "Pause")))"></RadzenButton>
                        <RadzenButton Text="@EnsureFullMode("Delete")" Icon="delete" MouseEnter="@(args => ShowTooltip(args,"Delete"))"></RadzenButton>
                            <RadzenButton Text="@EnsureFullMode("Restart")" Icon="restart_alt" MouseEnter="@(args => ShowTooltip(args,"Restart"))"></RadzenButton>
            </RadzenStack>
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.End">
                <RadzenButton Icon="open_in_new" MouseEnter="@(args => ShowTooltip(args, "Open in a new tab"))"></RadzenButton>
                <RadzenButton Icon="close" Click="OnContainerDetailsClose" MouseEnter="@(args => ShowTooltip(args, "Close"))"></RadzenButton>
            </RadzenStack>
        </RadzenStack>
    </SectionContent>
    <SectionContent SectionName="page-details-sidebar">
        <RadzenDataGrid Data="@_containerCommonInfo">
            <Columns>
                <RadzenDataGridColumn Title="Name" Property="Name"></RadzenDataGridColumn>
                <RadzenDataGridColumn Title="Value" Property="Value">
                    <Template Context="data">
                        @if (data.Value is DateTime dateTime)
                        {
                            @dateTime.ToString("yyyy-MM-dd hh:mm:ss")
                        }
                        else if (data is { Name: "Image", Value: not null })
                        {
                            <a href="">@data.Value.ToString()!.TrimStart('/')</a>
                        }
                        else
                        {
                            @data.Value?.ToString()
                        }
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
        <RadzenTabs TabPosition="TabPosition.Top" RenderMode="TabRenderMode.Client">
            <Tabs>
                <RadzenTabsItem Text="Logs"></RadzenTabsItem>
                <RadzenTabsItem Text="Details"></RadzenTabsItem>
                <RadzenTabsItem Text="Inspect"></RadzenTabsItem>
                <RadzenTabsItem Text="Stats"></RadzenTabsItem>
                <RadzenTabsItem Text="Volumes"></RadzenTabsItem>
                <RadzenTabsItem Text="Networks"></RadzenTabsItem>
                <RadzenTabsItem Text="Files"></RadzenTabsItem>
            </Tabs>
        </RadzenTabs>
    </SectionContent>
}

@code {

    [Parameter]
    public ContainerModel? Container { get; set; }

    [Parameter]
    public bool CompactMode { get; set; }

    [Parameter]
    public Func<Task>? Close { get; set; }

    private CommonInfo[] _containerCommonInfo = [];

    public async Task UpdateAsync(ContainerEvent @event)
    {
        if (@event is UpdateContainerEvent update)
        {
            Container = update.Container;
            await ReloadAsync();
        }
        else if (@event is DestroyContainerEvent)
        {
            await OnContainerDetailsClose();
        }
    }

    private string ChooseMenuText(string activate, string diactivate)
    {
        return activate;
    }

    private string? EnsureFullMode(string? activate)
    {
        return CompactMode ? null : activate;
    }

    private void ShowTooltip(ElementReference elementReference, string text, TooltipOptions? options = null) => TooltipService.Open(elementReference, text, options);

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        await ReloadAsync();
    }

    protected async Task ReloadAsync()
    {
        if (Container != null)
        {
            _containerCommonInfo =
            [
                new("ID", Container.ContainerId),
        new ("Name", Container.ContainerName),
        new ("Image", Container.ImageName),
        new ("Status", Container.Status),
        new ("Created", Container.Created),
        new ("Start time", "")
            ];
        }
        else
        {
            _containerCommonInfo = [];
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    private class CommonInfo(string name, object value)
    {
        public string Name { get; set; } = name;

        public object? Value { get; set; } = value;
    }

    private async Task OnContainerDetailsClose()
    {
        if (Close != null)
        {
            await Close();
        }
    }

}
